const express = require('express');
const router = express.Router();
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const paystack = require('paystack-node')(process.env.PAYSTACK_SECRET_KEY);
const auth = require('../middleware/auth');
const User = require('../models/User');
const Course = require('../models/Course');

// Stripe payment
router.post('/stripe', auth, async (req, res) => {
  try {
    const course = await Course.findById(req.body.courseId);
    if (!course) return res.status(404).json({ message: 'Course not found' });

    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price_data: {
          currency: 'usd',
          product_data: {
            name: course.title,
            description: course.description,
          },
          unit_amount: course.price * 100,
        },
        quantity: 1,
      }],
      mode: 'payment',
      success_url: `${process.env.FRONTEND_URL}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.FRONTEND_URL}/courses/${course._id}`,
      metadata: {
        userId: req.user.id,
        courseId: course._id.toString()
      }
    });

    res.json({ url: session.url });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Paystack payment
router.post('/paystack', auth, async (req, res) => {
  try {
    const course = await Course.findById(req.body.courseId);
    if (!course) return res.status(404).json({ message: 'Course not found' });

    const response = await paystack.initializeTransaction({
      email: req.user.email,
      amount: course.price * 100,
      reference: `EDU_${Date.now()}_${req.user.id}`,
      callback_url: `${process.env.FRONTEND_URL}/verify-payment`,
      metadata: {
        userId: req.user.id,
        courseId: course._id.toString()
      }
    });

    res.json({ url: response.data.authorization_url });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Verify and save payment
router.post('/verify', auth, async (req, res) => {
  try {
    let payment;
    if (req.body.gateway === 'stripe') {
      payment = await stripe.checkout.sessions.retrieve(req.body.sessionId);
      if (!payment || payment.payment_status !== 'paid') {
        return res.status(400).json({ message: 'Payment not completed' });
      }
    } else if (req.body.gateway === 'paystack') {
      const response = await paystack.verifyTransaction(req.body.reference);
      if (!response.data.status) {
        return res.status(400).json({ message: 'Payment not completed' });
      }
      payment = response.data;
    }

    // Update user's purchased courses
    const userId = payment.metadata.userId;
    const courseId = payment.metadata.courseId;

    await User.findByIdAndUpdate(userId, {
      $addToSet: { purchasedCourses: courseId }
    });

    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;
