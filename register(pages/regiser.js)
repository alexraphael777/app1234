import { Box, Button, Container, FormControl, FormLabel, Heading, Input, VStack } from '@chakra-ui/react';
import { useForm } from 'react-hook-form';
import axios from 'axios';
import { useRouter } from 'next/router';
import { useMutation } from 'react-query';

const registerUser = async (data) => {
  const response = await axios.post('/api/auth/register', data);
  return response.data;
};

export default function Register() {
  const router = useRouter();
  const { register, handleSubmit, formState: { errors } } = useForm();
  
  const mutation = useMutation(registerUser, {
    onSuccess: (data) => {
      localStorage.setItem('token', data.token);
      router.push('/dashboard');
    }
  });

  const onSubmit = (data) => {
    mutation.mutate(data);
  };

  return (
    <Container maxW="container.sm" py={10}>
      <Heading as="h1" size="xl" mb={10} textAlign="center">
        Register
      </Heading>
      <Box as="form" onSubmit={handleSubmit(onSubmit)}>
        <VStack spacing={6}>
          <FormControl id="name" isInvalid={errors.name}>
            <FormLabel>Name</FormLabel>
            <Input
              type="text"
              {...register('name', { required: 'Name is required' })}
            />
            {errors.name && <Text color="red.500">{errors.name.message}</Text>}
          </FormControl>
          
          <FormControl id="email" isInvalid={errors.email}>
            <FormLabel>Email</FormLabel>
            <Input
              type="email"
              {...register('email', { required: 'Email is required' })}
            />
            {errors.email && <Text color="red.500">{errors.email.message}</Text>}
          </FormControl>
          
          <FormControl id="password" isInvalid={errors.password}>
            <FormLabel>Password</FormLabel>
            <Input
              type="password"
              {...register('password', { required: 'Password is required', minLength: { value: 6, message: 'Password must be at least 6 characters' } })}
            />
            {errors.password && <Text color="red.500">{errors.password.message}</Text>}
          </FormControl>
          
          <Button
            type="submit"
            colorScheme="blue"
            isLoading={mutation.isLoading}
            width="full"
          >
            Register
          </Button>
        </VStack>
      </Box>
    </Container>
  );
}
